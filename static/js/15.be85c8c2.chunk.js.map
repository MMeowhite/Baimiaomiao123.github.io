{"version":3,"file":"static/js/15.be85c8c2.chunk.js","mappings":"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","sources":["widget/nav/index.js","webpack://website/./src/widget/nav/nav.css?db9a"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './nav.css';\nimport { Link } from \"react-router-dom\";\nimport { useTheme } from \"../../components/themeProvider\";\nimport useConfig from \"../../utils/useConfig\";\nimport icons from \"../../assets/icons\";\n\n// 平滑滚动到目标位置\nconst smoothScrollTo = (targetId, duration = 1000) => {\n    const targetElement = document.getElementById(targetId);\n    if (!targetElement) return;\n\n    const targetPosition = targetElement.getBoundingClientRect().top + window.scrollY;\n    const startPosition = window.scrollY;\n    const distance = targetPosition - startPosition;\n    let startTime = null;\n\n    function scrollStep(timestamp) {\n        if (!startTime) startTime = timestamp;\n        const progress = timestamp - startTime;\n        const easeInOut = (progress / duration) < 0.5\n            ? 2 * (progress / duration) ** 2\n            : -1 + (4 - 2 * (progress / duration)) * (progress / duration);\n\n        window.scrollTo(0, startPosition + distance * easeInOut);\n\n        if (progress < duration) {\n            requestAnimationFrame(scrollStep);\n        } else {\n            window.scrollTo(0, targetPosition);\n        }\n    }\n\n    requestAnimationFrame(scrollStep);\n};\n\nconst Nav = (props) => {\n    const [navItemNames, setNavItemName] = useState([]);\n    const [navItemLinks, setNavItemLink] = useState([]);\n    const { isDarkMode } = useTheme();\n\n    const [isToggleShow, setIsToggleShow] = useState(false); // 控制汉堡菜单是否显示\n    const [isToggled, setIsToggled] = useState(false); // 控制是否显示导航栏\n    const [isToggleNavShow, setIsToggleNavShow] = useState(false);\n\n    useEffect(() => {\n        const handleResize = () => {\n            if (window.innerWidth < 768) {\n                setIsToggleShow(true);\n            } else {\n                setIsToggleShow(false);\n            }\n        };\n\n        // 初始判断\n        handleResize();\n        window.addEventListener('resize', handleResize);\n\n        return () => {\n            window.removeEventListener('resize', handleResize);\n        };\n    }, []);\n\n    // 监听 URL Hash 变化并滚动到目标\n    useEffect(() => {\n        const handleHashChange = () => {\n            if (window.location.hash) {\n                const targetId = window.location.hash.replace(\"#\", \"\"); // 获取 ID\n                smoothScrollTo(targetId, 500);\n            }\n        };\n\n        // 页面加载时检查 hash\n        handleHashChange();\n\n        // 监听 hash 变化\n        window.addEventListener(\"hashchange\", handleHashChange);\n\n        return () => {\n            window.removeEventListener(\"hashchange\", handleHashChange);\n        };\n    }, []); // 仅在组件挂载时执行\n\n    // 获取配置文件数据\n    const { configValue: navbarConfig, loading, error } = useConfig('widgets.navbar');\n\n    useEffect(() => {\n        if (navbarConfig) {\n            const navItems = Object.keys(navbarConfig);\n            const navItemNames = navItems.map(item => navbarConfig[item].name);\n            const navItemLinks = navItems.map(item => navbarConfig[item].link);\n\n            setNavItemName(navItemNames);\n            setNavItemLink(navItemLinks);\n        }\n    }, [navbarConfig]);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    if (error) {\n        return <div>Error loading configuration: {error}</div>;\n    }\n\n    const handleClick = (event, id) => {\n        event.preventDefault();\n        window.location.hash = id; // 更新 hash，触发 `hashchange`\n        smoothScrollTo(id, 500);\n    };\n\n    const toggleNav = () => {\n        setIsToggled(!isToggled); // 设置 toggle 图标的变化\n        setIsToggleNavShow(!isToggleNavShow); // 设置 toggleNav 是否进行展示\n    };\n\n    return (\n        <div>\n            {isToggleShow ? (\n                <div className=\"toggle-section\">\n                    <div className=\"toggle-button\" onClick={toggleNav}>\n                        {isToggled ? icons.close() : icons.open()} {/* 根据 isToggled 状态选择图标 */}\n                    </div>\n                    {isToggleNavShow && (\n                        <nav className=\"navigate html-bottom vertical-nav\" style={props.style}>\n                            <ul>\n                                {navItemNames?.length > 0 &&\n                                    navItemNames.map((item, index) => (\n                                        <li key={index} className=\"m-2\">\n                                            <Link\n                                                to={`#${item.toLowerCase()}`}\n                                                onClick={(e) => handleClick(e, navItemLinks[index])}\n                                                className={isDarkMode ? \"dark\" : \"light\"}\n                                            >\n                                                {item}\n                                            </Link>\n                                        </li>\n                                    ))}\n                            </ul>\n                        </nav>\n                    )}\n                </div>\n            ) : (\n                <nav className=\"navigate html-bottom horizontal-nav\" style={props.style}>\n                    <ul>\n                        {navItemNames?.length > 0 &&\n                            navItemNames.map((item, index) => (\n                                <li key={index}>\n                                    <Link\n                                        to={`#${item}`}\n                                        onClick={(e) => handleClick(e, navItemLinks[index])}\n                                        className={isDarkMode ? \"dark\" : \"light\"}\n                                        style={{ paddingLeft: \"5px\" }}\n                                    >\n                                        {index === navItemNames.length - 1 ? item : `${item} ·`}\n                                    </Link>\n                                </li>\n                            ))}\n                    </ul>\n                </nav>\n            )}\n        </div>\n    );\n};\n\nexport default Nav;\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["smoothScrollTo","targetId","duration","arguments","length","undefined","targetElement","document","getElementById","targetPosition","getBoundingClientRect","top","window","scrollY","startPosition","distance","startTime","requestAnimationFrame","scrollStep","timestamp","progress","easeInOut","scrollTo","props","navItemNames","setNavItemName","useState","navItemLinks","setNavItemLink","isDarkMode","useTheme","isToggleShow","setIsToggleShow","isToggled","setIsToggled","isToggleNavShow","setIsToggleNavShow","useEffect","handleResize","innerWidth","addEventListener","removeEventListener","handleHashChange","location","hash","replace","configValue","navbarConfig","loading","error","useConfig","navItems","Object","keys","map","item","name","link","_jsx","children","_jsxs","handleClick","event","id","preventDefault","className","onClick","toggleNav","icons","close","open","style","index","Link","to","toLowerCase","e","paddingLeft"],"sourceRoot":""}