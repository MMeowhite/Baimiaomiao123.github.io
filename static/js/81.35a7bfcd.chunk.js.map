{"version":3,"file":"static/js/81.35a7bfcd.chunk.js","mappings":"mIAOO,MAAMA,EAAc,SAACC,GAAkC,IAAxBC,EAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAChD,MAAMG,EAAQL,EAASM,MAAM,MACvBC,EAAM,GACZ,IAAIC,GAAc,EAyBlB,OAvBAH,EAAMI,SAASC,IAEX,GAAIA,EAAKC,OAAOC,WAAW,OAEvB,YADAJ,GAAeA,GAGnB,GAAIA,EAAa,OAGjB,MAAMK,EAAQ,oBAAoBC,KAAKJ,EAAKC,QAC5C,GAAIE,EAAO,CACP,MAAO,CAAEE,EAAQC,GAASH,EACpBI,EAAQF,EAAOZ,OACfe,EAAKjB,EACLA,EAAYe,EAAOC,GACnBD,EACGG,cACAC,QAAQ,UAAW,KACnBA,QAAQ,WAAY,IAC7Bb,EAAIc,KAAK,CAAEJ,QAAOD,QAAOE,MAC7B,KAGGX,CACX,C","sources":["utils/generateToC.js"],"sourcesContent":["/**\n * 根据 Markdown 内容解析生成目录\n * @param {string} markdown - Markdown 文本\n * @param {Function} [idGenerator] - 可选的自定义 ID 生成器\n * @returns {Array} - ToC 数据结构 [{ level, title, id }]\n */\n\nexport const generateToC = (markdown, idGenerator = null) => {\n    const lines = markdown.split(\"\\n\");\n    const toc = [];\n    let inCodeBlock = false; // 用于标记是否在代码块中\n\n    lines.forEach((line) => {\n        // 检测代码块开始或结束\n        if (line.trim().startsWith(\"```\")) {\n            inCodeBlock = !inCodeBlock;\n            return;\n        }\n        if (inCodeBlock) return; // 跳过代码块内容\n\n        // 匹配标题\n        const match = /^(#{1,6})\\s+(.+)$/.exec(line.trim());\n        if (match) {\n            const [, hashes, title] = match;\n            const level = hashes.length; // 根据 `#` 数量判断标题层级\n            const id = idGenerator\n                ? idGenerator(title, level) // 如果提供了自定义 ID 生成器，则使用\n                : title\n                    .toLowerCase()\n                    .replace(/[^\\w]+/g, \"-\") // 替换非单词字符为 `-`\n                    .replace(/^-+|-+$/g, \"\"); // 去掉首尾的 `-`\n            toc.push({ level, title, id });\n        }\n    });\n\n    return toc;\n};\n"],"names":["generateToC","markdown","idGenerator","arguments","length","undefined","lines","split","toc","inCodeBlock","forEach","line","trim","startsWith","match","exec","hashes","title","level","id","toLowerCase","replace","push"],"sourceRoot":""}